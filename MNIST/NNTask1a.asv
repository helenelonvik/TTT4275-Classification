%% Task 2.1a)

% Load data 
data = load("data_all.mat");    % Includes num_test, num_train, testlab, testv, trainlab, trainv, vec_size
load('NN_pred.mat');            % Includes the result 

numClasses = 10; 

% NN Classifier (comment out when finished running)
pred = zeros(10, data.num_test);
tic
[NN_pred, confusionMx, misClassified, corrClassified] = NNClassifier(pred, data.num_test, data.trainv, data.testv, data.trainlab, data.testlab);
toc

% Confusion Matrix - Comparing NNpred with the knowns. 
knowns =  zeros(10, size(NN_pred,2));
for k = 1:size(NN_pred,2)
    knowns(data.testlab(k)+1,k) = 1;
end

figure(1)
plotConfusion(knowns, NN_pred);
title("NN without clustering");

% Error Rate   OBS MÃ¥ fikse Error Rate
%errorRate = (num_test-trace(confusionMx))/num_test;
%C = confusionmat(knowns, NN_pred);
% err_classification = (data.num_test - trace(C))/(data.num_test);
%error_rate = 1 - trace(C)/num_test;
% disp('Error Rate: ');
% disp(errorRate);


%% Task 2.1b) 
% Plot some of the misclassifed pixtures.
figure(2);
clf;
sgtitle('Misclassified images');
for i = 1:numClasses
    subplot(2,5,i); %num1 x num2 = Nmisclass (as a general rule, but this code hasn't really been scaled for anything other than 10)
    set(gca,'XTick',[],'YTick',[])
    id = misClassified(i);
    imagedrawer(data.testv(id,:));
    title({sprintf('Guessed: %d',i-1), sprintf('Actual: %d',testlab(id))});
end



